------------------------------------------------------------------------------
 - Name : Rennie Kipchirchir
 - Spaceship simulator project
 - File: README
 - Date modified: 10/20/23
-----------------------------------------------------------------------------
                        Project Description
-----------------------------------------------------------------------------

I am makeing a spaceship radar simulator.
The radar system will help the spaceship avoid collission. The objects that 
could cause collissions include: other spaceships, satellites, space debris, 
and asteroids. The radar system wil scan its sorroudings for objects, if an 
object is encountered near its path, it gets the size and velocity of the
object and then finds the distance of object and probability of impact. If there
is a high probability of impact, it calculates the nearest safe path to travel. 
The user interface wil be inform of a radar display that shows the objects in 
accordance with their size to scale near the spaceship. it also displays
number of objects within the spaceships's sorroundings. When an object
is clicked it shows the objects distance and probability of impact. Users could
also move the objects by dragging them across the map. There will also be 
an option to zoom in and out of the map. It will also have a scanner that 
simulates the rotating scanner. it will also have a fastforward and rewind
option to change speed of the simulator. Up, down, left, and right button to 
move the map. Finally it will have a start, stop, find new path, reset button
and an alarm button if collission cannot be avoided/ potential impact.

-----------------------------------------------------------------------------
                        Acknowledgements
-----------------------------------------------------------------------------

1. Youtube tutorials
2. Oracle Help Center website on java swing
3. Java Swing tutorial
4. Lecture materials

-----------------------------------------------------------------------------
                      What program does so far
-----------------------------------------------------------------------------

                    Week 5 :
----------------------------------------
I have implemented movement of all my drawings.

I have implemented more controls. The reset button that resets the screen 
to initial drawinds. I have also implemented the direction buttons which 
moves items in the desired direction.

I have also implemented a new section in which people could add drawings
to the map.

My forward and direction buttons only work when simulation is running and does
not work if simulation is stopped.

My Layout also resizes accordingly and the east panel is removed if screens
goes below certain dimension in which the righ objects can no longer be well 
displayed.


                    Week 4 :
----------------------------------------
I have implemented all the drawings required for the map : planet, spaceship,
spacedebri, satelites

I have updated this buttons to execute their tasks: Alarm, forward, rewind

I have simulated movement on the program. Works by moving all items along the
y axis except from the central spaceship. The central spaceship acts as the 
spaceship to be controlled.

I am yet to implement movement for spacedebri.

Vehicle class: SpaceShipCanvas
Model class: MyMap
Public Interface: DrawingCanvas

                    Week 3 :
----------------------------------------
I have correctly implemented panels for drawing on my window. The Panels are
able to resize with their drawings but there is a limit for minimzation
to ensure every item remains visible. Maximization has no limit.

I have also implemented the Start and end button. The start button starts the
simulation while the end button ends the simulation. 
The other buttons just show text when clicked. They have not yet been 
implemented.

I have added some drawings representing the objects I am going to have.
There is a rectangle drawing which will be use to showcase object information
There is a huge circle drawing representing the map, with the circumference
of the circle representing the scope.

The map has a pointer that rotates around it to simulate a radar's sweep hand.
The radar will start sweeping when start is clicked and stop when end is 
clicked.

The map also has drawings of a spaceship, planet, and asteroid. The position
of these objects update after a period of time. The positions are limited to 
inside the map.

The program correctly quits when the window is closed.

-----------------------------------------------------------------------------
                    Potential bug?
-----------------------------------------------------------------------------

No any outstanding bug

-----------------------------------------------------------------------------
                        Architecture
-----------------------------------------------------------------------------

Program is implemented using Java.swing interface

Interfaces:
-------------------
|-- represents classes implementing the interface

DrawingCanvas
    |--SpaceShipCanvas
    |--AsteroidCanvas
    |--SateLite
    |--PlanetCanvas
    |--SpaceDebriCanvas
    |--ObjectBoxCanvas

ObjectListener
    |--MyMap

--------------------------------------------------------------------------

Inheritance Hierachy :
-----------------------

|-- represents the subclasses of a given  class

JButton
    |--MyButton
        |--StartButton
        |--EndButton
        |--RewindButton
        |--ForwardButton
        |--AlarmButton
        |--FireButton
        |--ArrowButton
        |--ResetButton

SpaceShipCanvas
    |--MySpaceship

JPanel
    |--MyPanel
    |--MyMap
    |--ObjectInformation 
    |--ObjectDetails

JCombox
    |--DropDown


-----------------------------------------------------------------------

Aggregation Hierachy :
-----------------------
|-- represents classes relied on by the class to complete the class task
*-- represents public interface used by the class

Main
|-- JFrame
|-- MyPanel
    |-- JPanel
    |-- MyMap
        |-- JPanel
        |-- SpaceShipCanvas
            *-- DrawingCanvas
        |-- SpaceshipListener
        |-- MySpaceship
            *-- DrawingCanvas
        |-- MySpaceshipListener
        |-- AteroidCanvas
            *-- DrawingCanvas
        |-- AstoroidListener
        |-- PlanetCanvas
            *-- DrawingCanvas
            |-- SateLite
                *-- DrawingCanvas
        |-- PlanetListener
        |-- SpaceDebriCanvas
            *-- DrawingCanvas
        *--ObjectListener

    |--ObjectInformation
        |--ObjectBox
            *-- DrawingCanvas
    
    |--MyButton
        |--JButton
        |--StartButton
        |--EndButton
        |--RewindButton
        |--ForwardButton
        |--AlarmButton
        |--FireButton
        |--ArrowButton
        |--ResetButton
    
    |--ObjectDetails
    
    |--DropDown


--------------------------------------------------------------------------

Collaboration relationships :
-----------------------------
MyMap depends on a number of classes to implement different functionalities
    1.movement of a drawing and pointer listeners are defined in the drawings
        class. Then my map simply calls this functions to effect a change on a
        drawing. i.e MyMap has a rewind function that when called calls 
        the drawings rewind function.
        so map.rewind()--> drawing.rewing(); drawing.rewind() has the 
        implementation of how rewind should work.
        This is the same for the following functions in MyMap:
        1. start_simulation calls drawing.start() which starts drawing timer.
        2.stop_simulation calls drawing.stop() which stops drawing timer.
        3.rewind_simulation calls drawing.rewind()
        4.activate_alarm --> calls drawing.activate_alarm (only applicable 
        for one drawing)
        5.reset_simulation -->calls reset for default drawings
        6.paintcomponent --> calls draing.draw functions

MyPanel: 
    relies on JPanel to create drawing panls
    relies on MyMap to create map drawings on central panel
    relies on button classes to implement functionalites of button added 
    to panels
    relies on ObjectInformatin to draw a display triangle on east layout
    relies on ObjectDetails to create a display to enable user add coordinates 
    for drawing on the map
    relies on DropDown to add a drop down bar on east layout
    relies on Toolkit to get screen size

-----------------------------------------------------------------

Encapsulation Secrets:
-----------------------

MyMap:
    manages objects draen on the map
    manages new drawing generations
    manages drawings to be drawn on map

MyPanel
    manages the creation of three main drawing layouts for the screen.
    (bottom layout for buttons, central layout for map, and east layout 
    for other buttons and widgets)
    tracks whether eastpanel is present and eliminates the eastpanel if the 
    dimensions go below 600 by 650.


------------------------------------------------------------------


How to run: 
---------------
1. run javac *.java
2. run java Main
------------------------------------------------------------------------------
 - Name : Rennie Kipchirchir
 - Spaceship simulator project
 - File: README
 - Date modified: 10/20/23
-----------------------------------------------------------------------------
                        Project Description
-----------------------------------------------------------------------------

I am makeing a spaceship radar simulator.

The radar system will help the spaceship avoid collission. The objects that 
could cause collissions include: other spaceships, planets
and asteroids. The radar system wil scan its sorroudings for objects. 
The user interface wil be inform of a radar display that shows the objects in 
accordance with their size to scale near the spaceship. it also displays
number of objects within the spaceships's sorroundings. When an object
is clicked it shows the objects name and speed and allows user to change the
color and speed of the object. There will also be 
an option to zoom in and out of the map. It will also have a scanner that 
simulates the rotating scanner. it will also have a fastforward and rewind
option to change speed of the simulator. Up, down, left, and right button to 
move items on the map. Finally it will have a start, stop, find new path, 
reset button and an alarm button if collission cannot be avoided/ 
potential impact. Finally it will also have a fire button that allows users
to fire missiles at objects on thir path.

-----------------------------------------------------------------------------
                        Acknowledgements
-----------------------------------------------------------------------------

1. Youtube tutorials
2. Oracle Help Center website on java swing
3. Java Swing tutorial
4. Lecture materials

-----------------------------------------------------------------------------
                      What program does so far
-----------------------------------------------------------------------------


                    Week 7 :
----------------------------------------
Implemented the missile functionality of the user's spaceship. So the fire
button works

Implemented zooming option for the map, users could zoom in and out of the 
map.


                    Week 6 :
----------------------------------------
I have implemented mouse picking for my drawings except for satelite drawing
and debri drawing. The mouse picking enables user to update speed and color
of the drawing. Satelite is not implemented as it depends on planet and 
debri is not updated since their movement is fast.

I have implemented collission of objects on screen. The only object that 
does not collide with others is space debri as their impact is not enough
to cause an explosion

I have implemented a panel to show the score. In this simulation, instead 
pf the score it allows you to choose a galaxy you want to visit and updates
the distance to the galaxy over time.


                    Week 5 :
----------------------------------------
I have implemented movement of all my drawings.

I have implemented more controls. The reset button that resets the screen 
to initial drawinds. I have also implemented the direction buttons which 
moves items in the desired direction.

I have also implemented a new section in which people could add drawings
to the map.

My forward and direction buttons only work when simulation is running and does
not work if simulation is stopped.

My Layout also resizes accordingly and the east panel is removed if screens
goes below certain dimension in which the righ objects can no longer be well 
displayed.


                    Week 4 :
----------------------------------------
I have implemented all the drawings required for the map : planet, spaceship,
spacedebri, satelites

I have updated this buttons to execute their tasks: Alarm, forward, rewind

I have simulated movement on the program. Works by moving all items along the
y axis except from the central spaceship. The central spaceship acts as the 
spaceship to be controlled.

I am yet to implement movement for spacedebri.

Vehicle class: SpaceShipCanvas
Model class: MyMap
Public Interface: DrawingCanvas

                    Week 3 :
----------------------------------------
I have correctly implemented panels for drawing on my window. The Panels are
able to resize with their drawings but there is a limit for minimzation
to ensure every item remains visible. Maximization has no limit.

I have also implemented the Start and end button. The start button starts the
simulation while the end button ends the simulation. 
The other buttons just show text when clicked. They have not yet been 
implemented.

I have added some drawings representing the objects I am going to have.
There is a rectangle drawing which will be use to showcase object information
There is a huge circle drawing representing the map, with the circumference
of the circle representing the scope.

The map has a pointer that rotates around it to simulate a radar's sweep hand.
The radar will start sweeping when start is clicked and stop when end is 
clicked.

The map also has drawings of a spaceship, planet, and asteroid. The position
of these objects update after a period of time. The positions are limited to 
inside the map.

The program correctly quits when the window is closed.

-----------------------------------------------------------------------------
                    Potential bug?
-----------------------------------------------------------------------------

Reset functionality.
    When reset is clicked on exploded items, it is not able to redraw this 
    objects. This is because once object has exploded, then it is removed
    from system. I had not anticipated this when I created the reset 
    functionality a few back.

    Also reset needs to be clicked twice for it to work. I could not figure
    out why.

    I hope to address these bugs in the near future.

-----------------------------------------------------------------------------
                        Architecture
-----------------------------------------------------------------------------

Program is implemented using Java.swing interface

Interfaces:
-------------------
|-- represents classes implementing the interface

DrawingCanvas
    |--SpaceShipCanvas
    |--AsteroidCanvas
    |--SateLite
    |--PlanetCanvas
    |--SpaceDebriCanvas
    |--Missile
    |--PointerCanvas
    |--CircleCanvas


--------------------------------------------------------------------------

Inheritance Hierachy :
-----------------------

|-- represents the subclasses of a given  class

JButton
    |--MyButton
        |--StartButton
        |--EndButton
        |--RewindButton
        |--ForwardButton
        |--AlarmButton
        |--FireButton
        |--ArrowButton
        |--ResetButton
        |--ZoomButton

SpaceShipCanvas
    |--MySpaceship

JPanel
    |--MyPanel
    |--MyMap
    |--ObjectInformation 
    |--ObjectDetails

JCombox
    |--DropDown


-----------------------------------------------------------------------

Aggregation Hierachy :
-----------------------
|-- represents classes relied on by the class to complete the class task
*-- represents public interface used by the class

Main
|-- JFrame
|-- MyPanel
    |-- JPanel

    |-- MyMap
        |-- JPanel
        |-- SpaceShipCanvas
            *-- DrawingCanvas
            |-- ShipListener
        |-- MySpaceship
            *-- DrawingCanvas
            |-- Missile
                *--DrawingCanvas
            |-- MySpaceshipListener
        |-- AteroidCanvas
            *-- DrawingCanvas
            |-- AstoroidListener
        |-- PlanetCanvas
            *-- DrawingCanvas
            |-- SateLite
                *-- DrawingCanvas
            |-- PlanetListener
        |-- SpaceDebriCanvas
            *-- DrawingCanvas
            |--SpaceDebri
    
    |--MyButton
        |--JButton
        |--StartButton
        |--StopButton
        |--RewindButton
        |--ForwardButton
        |--AlarmButton
        |--FireButton
        |--ArrowButton
        |--ResetButton
        |--zoomButton
    
    |--ObjectDetails
    
    |--DropDown

    |--ScorePanel
        |--simulation_over


--------------------------------------------------------------------------

Collaboration relationships :
-----------------------------
MyMap 
   - Depends on various drawable classes like 'SpaceshipCanvas', 'AsteroidCanvas',
    SpaceDebriCanvas, Satelite, PlanetCanvas, PointerCanvas, CircleCanvas
    to draw objects on screen and display behavior after an aspect is altered.
    i.e when right arrow is clicked
   - relies on Explosion class to draw the image of an explosion after two 
    objects have collided.

MyPanel: 
    relies on JPanel to create drawing panls
    relies on MyMap to create map drawings on central panel
    relies on button classes to implement functionalites of button added 
    to panels
    relies on ObjectInformatin to draw a display triangle on east layout
    relies on ObjectDetails to create a display to enable user add coordinates 
    for drawing on the map
    relies on DropDown to add a drop down bar on east layout
    relies on Toolkit to get screen size
    relies on ScorePanel to draw a panel to showcase the state of the game
    as it progresses

Planetcanvas relies on Satelite to draw images of satelites around it.

Simulation over relies on scorepanel to know whether the user succeeded in 
reaching destination. It also relies on MyMap to notify it whether the user 
spaceship exploded after collission

SpaceDebriCanvas relies on spaceDebri class to help it create the offset 
values for debri.

MySpaceship relies on Missile to create a missile for the spaceship. MyMap 
relies on MySpaceship to realease a missilel.


-----------------------------------------------------------------

Encapsulation Secrets:
-----------------------

MyMap:
    manages objects drawn on the map
    manages new drawing generations
    manages drawings to be drawn on map
    checks for collisions of objects

MyPanel
    manages the main container by organizing the main layouts for the frame
    Dynamically adjusts the layout depending on size of the screen

simulation_over
    responsible for popups to display state of the game : success / fail

ClickPopup
    responsible for popup that allows user to change aspects of a drawing when 
    clicked

SpaceDebri
    responsible for setting and getting the offsets of a single debri which
    is then utilized by SpaceDebriCanvas to paint multiple debri

Explosion:
    handles all explosions to be drawn on map


------------------------------------------------------------------


How to run: 
---------------
1. run javac *.java
2. run java Main

How to clean .class files: 
---------------------------
rm *.class


How to Play:
--------------
The goal of the game is to arrive at destination without blowing up
So at start you choose a destination and use controls to ensure you do not
collide with other objects.

To avoid collission you either use the arrow buttons or the fire button 
which unleashes a missile that strikes down object that can destroy the 
ship. In this implementation I have assumed that planets are going to 
destroy the ships on collision. Other collisio objects inncludes asteroid
and other spaceships.


Reset button allows you to reset the simulation. Must be clicked twice to work.